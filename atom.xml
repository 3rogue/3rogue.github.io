<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
  <title><![CDATA[Yeoman]]></title>
  <subtitle><![CDATA[心有猛虎，细嗅蔷薇。]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="https://3rogue.xyz//"/>
  <updated>2017-02-25T15:38:27.133Z</updated>
  <id>https://3rogue.xyz//</id>
  
  <author>
    <name><![CDATA[Yeoman]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[AQI 超标提醒]]></title>
    <link href="https://3rogue.xyz/2017/02/25/aqi/"/>
    <id>https://3rogue.xyz/2017/02/25/aqi/</id>
    <published>2017-02-24T16:00:00.000Z</published>
    <updated>2017-02-25T15:38:27.133Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>现在空气成为大家关注的话题了，AQI 超标能够及时提醒自己的话还是很人性化的，许多天气 app 都可以实现这功能，我懒得再装个天气 app 了，虽然自带的也有 pm2.5 的数值，桌面小插件我也不记得每天都看下它，<del>真是懒到家了</del>还是通知提醒我比较靠谱。这就是本文的由来了。</p>
</blockquote>
<a id="more"></a>
<p>那么我们需要做的就是：</p>
<ol>
<li>获取 AQI 数值的api</li>
<li>制作 rss</li>
<li>rss 更新就提醒自己</li>
</ol>
<p>功能 2 的启发来自于 <a href="https://binux.blog/2013/03/google-apps-script/" target="_blank" rel="external">binux</a> 关于 gas 的使用，让我们可以轻松实现rss的制作。顺便说下大大 github 的签到和爬虫框架都非常实用，不容错过。</p>
<p>去 <a href="http://aqicn.org/api/" target="_blank" rel="external">http://aqicn.org/api/</a> 申请个令牌，查看 api 文档，我这里只用了一个简单的 get 命令就行了。gas 生成 rss，代码如下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doGet</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">   <span class="keyword">var</span> response = UrlFetchApp.fetch(<span class="string">"https://api.waqi.info/feed/changzhou/?token=你的token"</span>);</span><br><span class="line">   <span class="keyword">var</span> data = <span class="built_in">JSON</span>.parse(response.getContentText());</span><br><span class="line">   <span class="keyword">var</span> feed = <span class="string">'&lt;?xml version="1.0" encoding="utf-8" ?&gt;'</span>+<span class="string">'&lt;rss version="2.0"&gt;'</span></span><br><span class="line">   +<span class="string">'&lt;channel&gt;'</span>+<span class="string">'&lt;title&gt;AQI常州超标数值&lt;/title&gt;'</span>+<span class="string">'&lt;link&gt;http://aqicn.org/here/&lt;/link&gt;'</span>;</span><br><span class="line">   Logger.log(data.data.aqi)</span><br><span class="line">   <span class="keyword">if</span> (data.data.aqi &gt; <span class="number">200</span>)&#123;</span><br><span class="line">     feed += <span class="string">'&lt;item&gt;'</span>+<span class="string">'&lt;title&gt;'</span>+<span class="string">'aqi '</span>+data.data.aqi+<span class="string">'&lt;/title&gt;'</span>+<span class="string">'&lt;link&gt;'</span>+data.data.city.url+<span class="string">'&lt;/link&gt;'</span>+<span class="string">'&lt;/item&gt;'</span>;</span><br><span class="line">     feed += <span class="string">'&lt;/channel&gt;&lt;/rss&gt;'</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> ContentService.createTextOutput(feed).setMimeType(ContentService.MimeType.RSS);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里用的是常州做的测试，AQI&gt;200 的时候 rss 才更新，可以自行调整数值。</p>
<h3 id="怎么提醒自己合适呢？">怎么提醒自己合适呢？</h3><p><a href="https://ifttt.com/" target="_blank" rel="external">ifttt</a> 满足你的一切需求，短信、邮件、Telegram，我相信这些已经足够让人满意了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>现在空气成为大家关注的话题了，AQI 超标能够及时提醒自己的话还是很人性化的，许多天气 app 都可以实现这功能，我懒得再装个天气 app 了，虽然自带的也有 pm2.5 的数值，桌面小插件我也不记得每天都看下它，<del>真是懒到家了</del>还是通知提醒我比较靠谱。这就是本文的由来了。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[网易云音乐歌词下载]]></title>
    <link href="https://3rogue.xyz/2017/01/14/lyric/"/>
    <id>https://3rogue.xyz/2017/01/14/lyric/</id>
    <published>2017-01-13T16:00:00.000Z</published>
    <updated>2017-02-28T11:48:41.761Z</updated>
    <content type="html"><![CDATA[<p>功能：拖曳<strong>单个</strong>文件到命令行，匹配下载网易云音乐的歌词（双语）。</p>
<p>需要批量的建议考虑下<a href="http://www.autolyric.com/zh-hans/home" target="_blank" rel="external">可道歌词</a>，虽然按积分算的，不过歌词质量很高。其实也是一款歌词显示插件，支持 Windows Media Player、AIMP3、iTunes、Foobar2000等。或者 <a href="http://pan.baidu.com/s/1c2qZWlE" target="_blank" rel="external">ZonyLyricTools</a>,更纯粹的歌词、封面下载。</p>
<p>之前一直用的<a href="https://gist.github.com/3rogue/23c7bc2f876070dc3e956441e3d55a01" target="_blank" rel="external">脚本</a>手动下载，要去网页输入歌名搜索然后下载，有点繁琐，全自动下载的工具我又不是很满意，所以自己写个半自动的吧XD。<br><a id="more"></a></p>
<p><img src="https://ooo.0o0.ooo/2017/01/14/5879e3ac09778.png" alt=""></p>
<script src="https://gist.github.com/3rogue/5b03fbe499b2bfff91d1ef15a2583d55.js"></script>

<p>默认下载的路径是 F:\CloudMusic\Lrc ，自行修改即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>功能：拖曳<strong>单个</strong>文件到命令行，匹配下载网易云音乐的歌词（双语）。</p>
<p>需要批量的建议考虑下<a href="http://www.autolyric.com/zh-hans/home">可道歌词</a>，虽然按积分算的，不过歌词质量很高。其实也是一款歌词显示插件，支持 Windows Media Player、AIMP3、iTunes、Foobar2000等。或者 <a href="http://pan.baidu.com/s/1c2qZWlE">ZonyLyricTools</a>,更纯粹的歌词、封面下载。</p>
<p>之前一直用的<a href="https://gist.github.com/3rogue/23c7bc2f876070dc3e956441e3d55a01">脚本</a>手动下载，要去网页输入歌名搜索然后下载，有点繁琐，全自动下载的工具我又不是很满意，所以自己写个半自动的吧XD。<br>]]>
    
    </summary>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[硬盘文件大小排序]]></title>
    <link href="https://3rogue.xyz/2016/12/29/filesize/"/>
    <id>https://3rogue.xyz/2016/12/29/filesize/</id>
    <published>2016-12-28T16:00:00.000Z</published>
    <updated>2016-12-30T04:10:17.234Z</updated>
    <content type="html"><![CDATA[<p>学的 os , os.path 模块对文件目录处理，顺便实战一下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_size</span><span class="params">(path)</span>:</span></span><br><span class="line">    res=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> dirpath, dirnames, filenames <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">            fullpath = os.path.join(dirpath, name)</span><br><span class="line">            size = round(os.path.getsize(fullpath))</span><br><span class="line">            <span class="keyword">if</span> size&gt;<span class="number">0</span>:</span><br><span class="line">                res[fullpath] = round(size/<span class="number">1024</span>/<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">return</span> sorted(res.items(), key = <span class="keyword">lambda</span> d:d[<span class="number">1</span>], reverse = <span class="keyword">True</span>)</span><br><span class="line"></span><br><span class="line">path = <span class="string">'E:'</span></span><br><span class="line"><span class="keyword">with</span> open(os.path.join(<span class="string">'E:'</span>, <span class="string">'filesize.txt'</span>),<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> list_size(path):</span><br><span class="line">        f.write(i[<span class="number">0</span>]+<span class="string">'\t'</span>+str(i[<span class="number">1</span>])+<span class="string">'MB'</span>+<span class="string">'\n'</span>)</span><br></pre></td></tr></table></figure>
<p>os.listdir 只能看当前目录的文件，子文件夹的就不管了，所以就需要 os.walk 的遍历了。虽然小，不过还是挺实用的程序。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>学的 os , os.path 模块对文件目录处理，顺便实战一下。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br>]]>
    </summary>
    
      <category term="杂物间" scheme="https://3rogue.xyz/tags/%E6%9D%82%E7%89%A9%E9%97%B4/"/>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[导出我的豆瓣电影列表]]></title>
    <link href="https://3rogue.xyz/2016/12/29/mydouban/"/>
    <id>https://3rogue.xyz/2016/12/29/mydouban/</id>
    <published>2016-12-28T16:00:00.000Z</published>
    <updated>2016-12-31T08:40:38.560Z</updated>
    <content type="html"><![CDATA[<p>这个看上去好像是个奇怪的需求，但我个人还是挺需要的。有时候我想找的其实只是自己看过的列表，而豆瓣的搜索就算我给了关键词我标记过的电影排序并不会在前面。一开始也没有在意，在小众看到有人提供了<a href="http://www.appinn.com/douban-exporter-online/" target="_blank" rel="external">网页服务</a>，除了速度有点慢的离谱，其他基本能满足需求了。</p>
<p>最近刚好有兴趣，想着自己折腾下直接网页爬的话也更快些，而且自己可以定制自己要的，顺便熟悉下一些包的使用。</p>
<a id="more"></a>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> pyquery <span class="keyword">import</span> PyQuery <span class="keyword">as</span> pq</span><br><span class="line"><span class="keyword">import</span> xlwings <span class="keyword">as</span> xw</span><br><span class="line"></span><br><span class="line">userid = <span class="string">'38278418'</span></span><br><span class="line">url = <span class="string">'https://movie.douban.com/people/&#123;&#125;/collect'</span>.format(userid)</span><br><span class="line"></span><br><span class="line">page = requests.get(url)</span><br><span class="line">d = pq(page.text)</span><br><span class="line">pagenum = int(d(<span class="string">'.paginator&gt;a:last'</span>).text())</span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> num <span class="keyword">in</span> range(pagenum):</span><br><span class="line">    newurl = url + <span class="string">'?start=&#123;&#125;&amp;sort=time&amp;rating=all&amp;filter=all&amp;mode=grid'</span>.format(num*<span class="number">15</span>)</span><br><span class="line">    page = requests.get(newurl)</span><br><span class="line">    d = pq(page.text)</span><br><span class="line">    <span class="keyword">for</span> each <span class="keyword">in</span> d(<span class="string">'.grid-view .item'</span>).items():</span><br><span class="line">        detail = [each(<span class="string">'.title a'</span>).text(), each(<span class="string">'.title a'</span>).attr(<span class="string">'href'</span>), each(<span class="string">'.intro+li span:eq(0)'</span>).attr(<span class="string">'class'</span>)[<span class="number">6</span>], each(<span class="string">'.tags'</span>).text()[<span class="number">4</span>:], each(<span class="string">'.comment'</span>).text()]</span><br><span class="line">        res.append(detail)</span><br><span class="line">    <span class="comment"># if num == 1:</span></span><br><span class="line">    <span class="comment">#     break</span></span><br><span class="line"><span class="comment"># print(res)</span></span><br><span class="line"></span><br><span class="line">wb = xw.Book()</span><br><span class="line">xw.Range(<span class="string">'A1'</span>).value = [<span class="string">'片名'</span>, <span class="string">'评分'</span>, <span class="string">'标签'</span>, <span class="string">'短评'</span>]</span><br><span class="line">length = len(res)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(length):</span><br><span class="line">    xw.Range(<span class="string">'A&#123;&#125;'</span>.format(i+<span class="number">2</span>)).add_hyperlink(res[i][<span class="number">1</span>], text_to_display = res[i][<span class="number">0</span>])</span><br><span class="line">xw.Range(<span class="string">'B2:D&#123;&#125;'</span>.format(length+<span class="number">1</span>)).value = [i[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> res]</span><br><span class="line"></span><br><span class="line">wb.save(<span class="string">'movie.xlsx'</span>)</span><br></pre></td></tr></table></figure>
<p>requests 库不用说，pyquery 提取页面还是挺有意思的，数据导出成 excel 用的 xlwings 有些头大，用的挺难看的。</p>
<p>一直想试试 <a href="https://github.com/binux/pyspider/" target="_blank" rel="external">pyspider</a> ，这次正好搞定它。终于明白以前坑在哪里了，0.3.8 说是修复了windows的一个问题其实还是不行，老版本的0.3.7居然可以？蛋碎，其实锅还是 windows 的，既然搞定了就不弄虚拟机了。pyspider 爬虫就很简单了，直观明了方便，感谢 binux 。顺便提下，在线的 demo 我失败的页面挺多的，所以还是本地运行为好。有些依赖包如 lxml、pycurl ，pip 安装不了，记得去 <a href="http://www.lfd.uci.edu/~gohlke/pythonlibs/" target="_blank" rel="external">http://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 下载。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pyspider.libs.base_handler <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Handler</span><span class="params">(BaseHandler)</span>:</span></span><br><span class="line">    crawl_config = &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @every(minutes=24 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_start</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.crawl(<span class="string">'https://movie.douban.com/people/38278418/collect'</span>, callback=self.index_page)</span><br><span class="line"></span><br><span class="line"><span class="decorator">    @config(age=10 * 24 * 60 * 60)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index_page</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.next a'</span>).items():</span><br><span class="line">            self.crawl(each.attr.href, callback=self.index_page)</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> each <span class="keyword">in</span> response.doc(<span class="string">'.grid-view .item'</span>).items():</span><br><span class="line">            detail = [each(<span class="string">'.title a'</span>).text(), each(<span class="string">'.title a'</span>).attr(<span class="string">'href'</span>), each(<span class="string">'.intro+li span:eq(0)'</span>).attr(<span class="string">'class'</span>)[<span class="number">6</span>], each(<span class="string">'.tags'</span>).text()[<span class="number">4</span>:], each(<span class="string">'.comment'</span>).text()]</span><br><span class="line">            res.append(detail)</span><br><span class="line">        <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>
<p>数据可以 json 导出的，我也没在程序里折腾数据了，毕竟这个量级的爬虫用 pyspider 有点大材小用了。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>这个看上去好像是个奇怪的需求，但我个人还是挺需要的。有时候我想找的其实只是自己看过的列表，而豆瓣的搜索就算我给了关键词我标记过的电影排序并不会在前面。一开始也没有在意，在小众看到有人提供了<a href="http://www.appinn.com/douban-exporter-online/">网页服务</a>，除了速度有点慢的离谱，其他基本能满足需求了。</p>
<p>最近刚好有兴趣，想着自己折腾下直接网页爬的话也更快些，而且自己可以定制自己要的，顺便熟悉下一些包的使用。</p>]]>
    
    </summary>
    
      <category term="douban" scheme="https://3rogue.xyz/tags/douban/"/>
    
      <category term="爬虫" scheme="https://3rogue.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hexo 升级 https]]></title>
    <link href="https://3rogue.xyz/2016/12/20/Hexo2https/"/>
    <id>https://3rogue.xyz/2016/12/20/Hexo2https/</id>
    <published>2016-12-19T16:00:00.000Z</published>
    <updated>2017-01-08T13:12:56.427Z</updated>
    <content type="html"><![CDATA[<p><strong>2016-12-22更新</strong> 今天 <a href="https://coding.net" target="_blank" rel="external">coding</a> 邮件通知 pages 服务可以开启 SSL/TLS 证书了，<del>当然是 Let’s encrypt 的免费证书</del>。所以本文其实对于 coding 用户更麻烦了，而且下文中的 CloudFlare 是国外服务，解析时间还是没有优势的，需要的直接在 pages 面板开启即可。</p>
<p>https 大势所趋，我也尝尝鲜。不过全站 https 就不能用七牛的免费流量了，所以图床或者静态文件什么的就不能放了。现在图床用的 <a href="https://sm.ms/" target="_blank" rel="external">https://sm.ms/</a> ，博客托管在了 <a href="https://coding.net" target="_blank" rel="external">coding</a> ，SSL 就用 <a href="https://www.cloudflare.com" target="_blank" rel="external">CloudFlare</a> 的免费套餐。</p>
<a id="more"></a>
<p>注册后都是很简单的操作，扫描后把域名的 DNS 改为 CloudFlare 所提供的地址。如果扫描里没显示结果的话，自己手动加 CNAME 解析即可。稍等十几分钟后 Recheck ， Status: Active 就表示成功了。</p>
<p>在 crypto 分类里打开 HSTS 和 之后的 <em>include subdomains</em> 以及 <em>No-sniff</em> 选项。</p>
<p>记得修改 _config.yml 文件里的 url 为 https ，为了保证始终 https 连接，可以在主题的 head 标签下加入强制跳转：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"canonical"</span> href=<span class="string">"&lt;%= config.url %&gt;"</span> /&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript"></span><br><span class="line">    <span class="keyword">var</span> host = <span class="string">"yoursite.com"</span>;</span><br><span class="line">    <span class="keyword">if</span> ((host == <span class="built_in">window</span>.location.host) &amp;&amp; (<span class="built_in">window</span>.location.protocol != <span class="string">"https:"</span>))</span><br><span class="line">        <span class="built_in">window</span>.location.protocol = <span class="string">"https"</span>;</span><br><span class="line"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<p>操作完成后需要大概<strong>12小时</strong>左右生效，所以不要着急，第二天看看结果。生效后检查下网站是不是还有非 https 的资源引用，去  <a href="https://www.ssllabs.com/ssltest" target="_blank" rel="external">SSLLAB</a> 评下分。</p>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="https://zaicheng.me/2016/01/02/hexo-blog-with-custom-domain-and-cloudflare/" target="_blank" rel="external">Hexo blog with custom domain and cloudflare</a></li>
<li><a href="https://g2ex.github.io/2015/10/14/Hexo-with-SSL-Hosted-on-Github-Page/" target="_blank" rel="external">为Github的Hexo博客启用SSL/TLS</a></li>
<li><a href="https://budidharmawan.com/2016/05/30/Hexo-Github-Pages-Cloudflare-SSL/" target="_blank" rel="external">HEXO, GITHUB PAGES, CLOUDFLARE, SSL : HOLY SHIT</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p><strong>2016-12-22更新</strong> 今天 <a href="https://coding.net">coding</a> 邮件通知 pages 服务可以开启 SSL/TLS 证书了，<del>当然是 Let’s encrypt 的免费证书</del>。所以本文其实对于 coding 用户更麻烦了，而且下文中的 CloudFlare 是国外服务，解析时间还是没有优势的，需要的直接在 pages 面板开启即可。</p>
<p>https 大势所趋，我也尝尝鲜。不过全站 https 就不能用七牛的免费流量了，所以图床或者静态文件什么的就不能放了。现在图床用的 <a href="https://sm.ms/">https://sm.ms/</a> ，博客托管在了 <a href="https://coding.net">coding</a> ，SSL 就用 <a href="https://www.cloudflare.com">CloudFlare</a> 的免费套餐。</p>]]>
    
    </summary>
    
      <category term="Hexo" scheme="https://3rogue.xyz/tags/Hexo/"/>
    
      <category term="https" scheme="https://3rogue.xyz/tags/https/"/>
    
      <category term="blog" scheme="https://3rogue.xyz/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[尝试用 Telegram 来替代 Pushbullet]]></title>
    <link href="https://3rogue.xyz/2016/12/08/Telegram2Pushbullet/"/>
    <id>https://3rogue.xyz/2016/12/08/Telegram2Pushbullet/</id>
    <published>2016-12-07T16:00:00.000Z</published>
    <updated>2017-02-04T11:40:04.313Z</updated>
    <content type="html"><![CDATA[<p>Telegram 慕名已久，不过国内微信独大，作为一个聊天工具的话没有人用就是最大的尴尬了。不过，现在你可以把它当作 Pushbllet 的替代品留在你的手机中了。</p>
<a id="more"></a>
<h2 id="连接手机和电脑的_Pushbullet">连接手机和电脑的 Pushbullet</h2><p>给不熟悉 <a href="https://play.google.com/store/apps/details?id=com.pushbullet.android&amp;referrer=utm_source%3Dpushbullet.com" target="_blank" rel="external">Pushbullet</a> 的人简单介绍下它的功能：</p>
<ul>
<li>手机和电脑互传网页（手机到电脑甚至是自动打开标签）、图片。当然小文件也可以考虑，但毕竟是通过亚马逊云服务中转的，所以大文件更推荐使用usb连接或者其他局域网传输工具。</li>
<li>电脑管理和回复短信。这里的短信支持了许多第三方：WhatsApp, Telegram, Hangouts, Facebook Messenger, Allo and Line 然而微信是不可能的orz。</li>
<li>电脑查看、管理手机的通知栏信息。现在你不用打开你的手机，也不会错过任何消息了。</li>
<li>剪贴板同步。电脑、手机任意一端的剪贴板即可覆盖到另一端，相当实用的功能，然而 pro 版才有。</li>
<li>IFTTT 支持。瞬间多了无数种用法，任何你想要第一时间获取的信息利用 IFTTT 都可以实现。明天下雨了、rss 更新了、twitter 更新了，你都不会错过。</li>
</ul>
<p>不得不说 Pushbullet 非常的优秀，为什么要找替代品呢？ Pushbullet 之前免费，然而之后出现的 pro 版收费是39.99美元一年，不得不说还是略贵的。当然大部分功能仍然是免费的，<a href="https://www.pushbullet.com/pro" target="_blank" rel="external">收费</a> 的项目值得介意的就是剪贴板同步和通知栏管理（查看依旧可以）功能了。可是今年 Pushbullet 一整年都没有什么实质性更新，团队也很小，感受不到推出 pro 后的诚意。加上推送使用的 gcm 服务国内实在不稳定，电脑到手机的信息总是要打开 app 才行。</p>
<h2 id="支持_IFTTT_的_Telegram">支持 IFTTT 的 Telegram</h2><p><a href="https://telegram.org/" target="_blank" rel="external">Telegram</a> 最近支持 IFTTT 了，玩法立刻变得丰富多彩了。不再局限于一个聊天工具，我想这就是开放的好处吧。</p>
<p>所以说 Pushbullet 利用 IFTTT 能做的任何事，Telegram 也可以。同时利用 <a href="https://chrome.google.com/webstore/detail/ckkfnchnfmgpiejgaacmbngkcjbaaipd?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Chrome插件</a> 我们也连接了手机和电脑端。</p>
<p>然而不得不说的是还是有一定的局限性的：</p>
<ul>
<li>手机发送到电脑端的网页并不是自动打开的，插件实现更多的还是单向的电脑到手机，仍然需要打开 Telegram 的 <a href="https://desktop.telegram.org/" target="_blank" rel="external">pc版</a>、<a href="https://web.telegram.org/" target="_blank" rel="external">网页版</a>、或者 <a href="https://chrome.google.com/webstore/detail/telegram/clhhggbfdinjmjhajaheehoeibfljjno?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="external">Chrome应用</a>，当然并不是很麻烦。</li>
<li>仅实现了 Pushbullet 的功能1和5。</li>
</ul>
<p>对我个人来说，短信实在用的不多，查看和管理通知栏确实很有用，然而手机一般都习惯性放在办公桌面上了。所以我更在乎的是功能的稳定性，在 Telegram 上我看到了更多可能，毕竟有开源社区的力量是无限的。</p>
<p>其实连接手机和 pc 最合适的还是苹果，毕竟都是自家的操作系统连接方便。Windows 手机基本算是失败了，不过借助 Chrome 浏览器连接安卓也不是那么难堪。</p>
<p>最后给个福利，在 Telegram 利用 IFTTT 建了个09优酷视频的 <a href="https://telegram.me/ftd_2009" target="_blank" rel="external">channel</a>,欢迎关注。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Telegram 慕名已久，不过国内微信独大，作为一个聊天工具的话没有人用就是最大的尴尬了。不过，现在你可以把它当作 Pushbllet 的替代品留在你的手机中了。</p>]]>
    
    </summary>
    
      <category term="Pushbullet" scheme="https://3rogue.xyz/tags/Pushbullet/"/>
    
      <category term="Telegram" scheme="https://3rogue.xyz/tags/Telegram/"/>
    
      <category term="sth" scheme="https://3rogue.xyz/categories/sth/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[图像测试]]></title>
    <link href="https://3rogue.xyz/2016/06/21/test-images/"/>
    <id>https://3rogue.xyz/2016/06/21/test-images/</id>
    <published>2016-06-20T16:00:00.000Z</published>
    <updated>2016-12-20T01:13:26.590Z</updated>
    <content type="html"><![CDATA[<p>试一试图片效果<br><a id="more"></a><br><img src="https://ooo.0o0.ooo/2016/12/20/5858849c3d558.jpg" alt="hui3"><br><img src="https://ooo.0o0.ooo/2016/12/20/5858849e68665.jpg" alt="hui1"><br><img src="https://ooo.0o0.ooo/2016/12/20/5858849f1aaaf.png" alt="hui4"><br><img src="https://ooo.0o0.ooo/2016/12/20/5858849fa2217.png" alt="hui2"><br><img src="https://ooo.0o0.ooo/2016/12/20/5858849ff36b6.jpg" alt="hui5"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>试一试图片效果<br>]]>
    
    </summary>
    
      <category term="acg" scheme="https://3rogue.xyz/tags/acg/"/>
    
      <category term="image" scheme="https://3rogue.xyz/tags/image/"/>
    
      <category term="acg" scheme="https://3rogue.xyz/categories/acg/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[换卡后的二三事]]></title>
    <link href="https://3rogue.xyz/2015/10/02/after-change-sim/"/>
    <id>https://3rogue.xyz/2015/10/02/after-change-sim/</id>
    <published>2015-10-01T16:00:00.000Z</published>
    <updated>2016-12-10T13:19:26.809Z</updated>
    <content type="html"><![CDATA[<p>换了手机号，第一时间就想起一堆账号好像手机号码绑定的，赶紧更换手机：</p>
<ol>
<li><a href="http://accounts.alipay.com" target="_blank" rel="external">淘宝安全中心</a><br><a href="https://security.google.com/settings/security/signinoptions/rescuephone?utm_source=OGB/" target="_blank" rel="external">google</a> 方便<br><a href="http://aq.qq.com/" target="_blank" rel="external">腾讯</a> 腾讯真TM蛋疼，不记得密保问题只能人工申诉了，过程繁琐，页面许久没更新过的样子。<br><a href="https://passport.baidu.com/v2/accountsecurity?act=rebindmobile" target="_blank" rel="external">百度</a></li>
<li>各大网银（可能需要去网点办理）</li>
<li><a href="http://security.weibo.com/security/index" target="_blank" rel="external">微博</a><a id="more"></a></li>
<li>各大网上商城：京东（需要电话400-606-5500转7沟通）等，400电话收市话费的orz</li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>换了手机号，第一时间就想起一堆账号好像手机号码绑定的，赶紧更换手机：</p>
<ol>
<li><a href="http://accounts.alipay.com">淘宝安全中心</a><br><a href="https://security.google.com/settings/security/signinoptions/rescuephone?utm_source=OGB/">google</a> 方便<br><a href="http://aq.qq.com/">腾讯</a> 腾讯真TM蛋疼，不记得密保问题只能人工申诉了，过程繁琐，页面许久没更新过的样子。<br><a href="https://passport.baidu.com/v2/accountsecurity?act=rebindmobile">百度</a></li>
<li>各大网银（可能需要去网点办理）</li>
<li><a href="http://security.weibo.com/security/index">微博</a>]]>
    
    </summary>
    
      <category term="life" scheme="https://3rogue.xyz/categories/life/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[avmo 简单爬虫]]></title>
    <link href="https://3rogue.xyz/2015/08/09/avmo/"/>
    <id>https://3rogue.xyz/2015/08/09/avmo/</id>
    <published>2015-08-08T16:00:00.000Z</published>
    <updated>2016-12-31T08:42:07.634Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>主要练习 <a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/index.html#" target="_blank" rel="external">requests</a> ，非常的方便。<br>爬 avmo 虽然 low 了点，不过站点很友好。</p>
</blockquote>
<a id="more"></a>
<h2 id="单线程">单线程</h2><p>已转python3，编码不是问题了。</p>
<script src="https://gist.github.com/3rogue/59e87c09c6779699f61b.js"></script>

<h2 id="多线程">多线程</h2><p>多线程需要自己斟酌池子大小，太大的话开销更多所以有时候不会变快的。不过io密集型多线程优势非常的明显。比上面节省成吨的时间，如果你爬取的页面多的话。</p>
<script src="https://gist.github.com/3rogue/f86157e01b5fc0aee4e0.js"></script>

<h3 id="参考资料：">参考资料：</h3><ul>
<li><strong><a href="http://segmentfault.com/a/1190000000414339#articleHeader3" target="_blank" rel="external">一行 Python 实现并行化</a></strong></li>
<li><a href="http://www.oschina.net/code/snippet_2359276_50088#73034" target="_blank" rel="external">Python抓妹子图+多进程</a></li>
<li><a href="http://yangpengg.github.io/blog/2012/12/13/decode-and-encode-in-python/" target="_blank" rel="external">Decode and Encode in Python</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>主要练习 <a href="http://requests-docs-cn.readthedocs.org/zh_CN/latest/index.html#">requests</a> ，非常的方便。<br>爬 avmo 虽然 low 了点，不过站点很友好。</p>
</blockquote>]]>
    
    </summary>
    
      <category term="爬虫" scheme="https://3rogue.xyz/tags/%E7%88%AC%E8%99%AB/"/>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[八皇后问题学习 enumerate 和 permutations]]></title>
    <link href="https://3rogue.xyz/2015/08/08/8queen/"/>
    <id>https://3rogue.xyz/2015/08/08/8queen/</id>
    <published>2015-08-07T16:00:00.000Z</published>
    <updated>2016-12-31T03:34:17.935Z</updated>
    <content type="html"><![CDATA[<p>permutations 生成123…9的全排列，共9!个<br>enumerate 提取横纵坐标<br><a id="more"></a></p>
<script src="https://gist.github.com/3rogue/9806d55d97a72649e225.js"></script>
]]></content>
    <summary type="html">
    <![CDATA[<p>permutations 生成123…9的全排列，共9!个<br>enumerate 提取横纵坐标<br>]]>
    
    </summary>
    
      <category term="python" scheme="https://3rogue.xyz/categories/python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Markdown 入门基础]]></title>
    <link href="https://3rogue.xyz/2015/08/07/hello-world/"/>
    <id>https://3rogue.xyz/2015/08/07/hello-world/</id>
    <published>2015-08-06T16:00:00.000Z</published>
    <updated>2017-02-05T08:02:37.000Z</updated>
    <content type="html"><![CDATA[<p>利用# ## ###控制字体大小</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><p>利用 &gt; 插入引用<br><a id="more"></a></p>
<blockquote>
<p>这是一段引用文字</p>
</blockquote>
<p>*包裹文字 斜体</p>
<p><em>斜体</em></p>
<p>** 包裹粗体</p>
<p><strong>粗体</strong></p>
<p>~~ 包裹删除线</p>
<p><del>写错了</del></p>
<p>粗体中包含斜体/斜体中包含粗体，用 <em> </em> 代替 * 包裹中间的文字即可</p>
<p><em>Everyone <strong>must</strong> attend the meeting at 5 o’clock today.</em></p>
<p>‘-‘ 或者 ‘*’制造列表</p>
<ul>
<li>列表1</li>
<li>列表2</li>
</ul>
<ol>
<li>有序列表1</li>
<li>有序列表2</li>
</ol>
<p>用3个 ` 代码前后围绕，制造高亮，数字1左边，tab上方的按键</p>
<p>紧跟Python等  选择好语言显示更佳</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'This is python'</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="preprocessor">#<span class="keyword">include</span> <span class="string">"iostream"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"This is cpp"</span>&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"Post name"</span></span><br></pre></td></tr></table></figure>
<p>[xxx]环绕超链接文本 (xxx) 跟随填写链接地址</p>
<p><a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<p>图片插入<br><img src="https://ooo.0o0.ooo/2016/12/20/5858849c0da8e.jpg" alt="小圆"></p>
<h3 id="参考资料">参考资料</h3><ul>
<li><a href="https://help.github.com/articles/markdown-basics/" target="_blank" rel="external">Markdown Basics</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="external">GitHub Flavored Markdown</a></li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>利用# ## ###控制字体大小</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><p>利用 &gt; 插入引用<br>]]>
    
    </summary>
    
      <category term="Markdown" scheme="https://3rogue.xyz/tags/Markdown/"/>
    
      <category term="blog" scheme="https://3rogue.xyz/categories/blog/"/>
    
  </entry>
  
</feed>